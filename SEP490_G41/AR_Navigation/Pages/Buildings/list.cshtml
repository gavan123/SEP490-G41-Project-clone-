@page
@model AR_Navigation.Pages.Buildings.listModel
@{
    Layout = "_AdminLayout";
}
<style>
    /* Đặt kích thước cho container chứa ảnh */
    .selected-image-container {
        width: 200px;
        height: 200px;
        border: 2px solid #ced4da;
        border-radius: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 10px;
    }

        .selected-image-container img {
            max-width: 100%;
            max-height: 100%;
            border-radius: 8px;
        }
</style>
<div class="page-header no-gutters">
    <h1>Building List</h1>
    <div class="row align-items-md-center">
        <div class="col-md-6">
            <div class="row">
                <div class="col-md-5">
                    <div class="input-affix m-v-10">
                        <select class="form-control" id="building-facility">
                            <option value="0">All</option>
                            <!-- Thêm các tùy chọn cho các cơ sở hạ tầng khác nếu cần -->
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="text-md-right m-v-10">
                <button class="btn btn-primary" data-toggle="modal" data-target="#create-new-building">
                    <i class="anticon anticon-plus"></i>
                    <span class="m-l-5">New Building</span>
                </button>
            </div>
        </div>
    </div>
</div>
<div class="container-fluid">
    <div class="card " id="list-view">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th style="width: 30%;">Building Name</th>
                            <th>Floor Count</th>
                            <th>Status</th>
                            <th>Facility</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="building-list">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div class="row justify-content-center">
    <nav>
        <ul id="pagination" class="pagination"></ul>
    </nav>
</div>


@* Modal Create Building*@
<div class="modal fade" id="create-new-building">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Building</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <i class="anticon anticon-close"></i>
                </button>
            </div>
            <div class="modal-body">
                <form asp-page="/Buildings/List" asp-page-handler="CreateBuilding" id="form-add-building" method="post" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="new-building-name">Building Name</label>
                        <input type="text" class="form-control" id="new-building-name" placeholder="Please input building name" required>
                    </div>
                    <div class="form-group">
                        <label for="new-building-image">Image</label>
                        <div class="input-group">
                            <div class="custom-file">
                                <input type="file" name="ImageFile" class="custom-file-input" id="new-building-image" aria-describedby="inputGroupFileAddon" onchange="displaySelectedImage(this, 'add-selected-image-container')">
                                <label class="custom-file-label" for="new-building-image">Choose file</label>
                            </div>
                        </div>
                        <div id="add-selected-image-container" class="selected-image-container" style="margin-top: 10px;"></div>
                    </div>
                    <div class="form-group">
                        <label>Status</label>
                        <div class="custom-control custom-radio">
                            <input type="radio" id="statusActive" name="statusRadios" class="custom-control-input" value="active" checked>
                            <label class="custom-control-label" for="statusActive">Active</label>
                        </div>
                        <div class="custom-control custom-radio">
                            <input type="radio" id="statusDeactive" name="statusRadios" class="custom-control-input" value="deactive">
                            <label class="custom-control-label" for="statusDeactive">Deactive</label>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="new-building-facility">Facility</label>
                        <select class="form-control" id="new-building-facility">
                            <!-- Option sẽ được tạo bởi JavaScript -->
                        </select>
                    </div>
                    <button type="button" class="btn btn-primary" id="create-building-btn">Create Building</button>
                </form>
            </div>
        </div>
    </div>
</div>


@* Modal Edit Building*@
<div class="modal fade" id="edit-building">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Building</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <i class="anticon anticon-close"></i>
                </button>
            </div>
            <div class="modal-body">
                <form asp-page="/Buildings/List" asp-page-handler="EditBuilding" id="form-edit-building" method="post" enctype="multipart/form-data">
                    <input type="hidden" name="BuildingId" id="building-id" value="">
                    <div class="form-group">
                        <label for="edit-building-name">Building Name</label>
                        <input type="text" class="form-control" id="edit-building-name" placeholder="Please input building name" required>
                    </div>
                    <div class="form-group">
                        <label for="edit-building-image">Image</label>
                        <div class="input-group">
                            <div class="custom-file">
                                <input type="file" name="ImageFile" class="custom-file-input" id="edit-building-image" aria-describedby="inputGroupFileAddon" onchange="displaySelectedImage(this, 'edit-selected-image-container')">
                                <label class="custom-file-label" for="edit-building-image">Choose file</label>
                            </div>
                        </div>
                        <div id="edit-selected-image-container" class="selected-image-container" style="margin-top: 10px;"></div>
                    </div>
                    <div class="form-group">
                        <label>Status</label>
                        <div class="custom-control custom-radio">
                            <input type="radio" id="edit-statusActive" name="edit-statusRadios" class="custom-control-input" value="active" checked>
                            <label class="custom-control-label" for="edit-statusActive">Active</label>
                        </div>
                        <div class="custom-control custom-radio">
                            <input type="radio" id="edit-statusDeactive" name="edit-statusRadios" class="custom-control-input" value="deactive">
                            <label class="custom-control-label" for="edit-statusDeactive">Deactive</label>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="edit-building-facility">Facility</label>
                        <select class="form-control" id="edit-building-facility">
                            <!-- Option sẽ được tạo bởi JavaScript -->
                        </select>
                    </div>
                    <button type="button" class="btn btn-primary" id="edit-building-btn">Save Changes</button>
                </form>
            </div>
        </div>
    </div>
</div>

@* Modal Add Floor*@
<div class="modal fade" id="add-floor-modal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Floor</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <i class="anticon anticon-close"></i>
                </button>
            </div>
            <div class="modal-body">
                <form asp-page="/Buildings/List" id="form-add-floor" method="post" enctype="multipart/form-data">
                    <input type="hidden" name="BuildingId" id="add-floor-building-id" value="">
                    <div class="form-group">
                        <label for="floor-number">Floor Number</label>
                        <input type="number" class="form-control" id="floor-number" placeholder="Enter floor number" min="1" required>
                    </div>
                    <button type="button" class="btn btn-primary" id="add-floor-btn">Add Floor</button>
                </form>
            </div>
        </div>
    </div>
</div>


<script>

    $(document).ready(() => {
        const userJson = sessionStorage.getItem('user');
        if (!userJson) {
            window.location.href = '/Authen/Login';
        } else {
            const user = JSON.parse(userJson);
            if (user.status !== "active") {
                Swal.fire({
                    icon: 'error',
                    title: 'Access Denied',
                    text: 'You do not have permission to access this page.',
                    showConfirmButton: false,
                    timer: 2000
                }).then(() => {
                    window.location.href = '/HomePage/Home';
                });
            }
        }

        const itemsPerPage = 5;
        let currentPage = 1;

        const updateBuildingList = async (buildings, currentPage, itemsPerPage) => {
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const buildingsToShow = buildings.slice(startIndex, endIndex);

            buildings.sort((a, b) => a.buildingName.localeCompare(b.buildingName));

            $('#building-list').empty();

            for (const building of buildingsToShow) {
                const buildingId = building.buildingId;

                try {
                    const floors = await $.ajax({
                        url: `https://finnsapi.developvn.click/api/floors?$filter=buildingId eq ${buildingId}`,
                        type: 'GET',
                        dataType: 'json'
                    });

                    const count = floors.length;
                    const countText = count > 0 ? `${count} Floor` : `${count} Floor <span class="btn btn-sm btn-info addFloor" data-id="${building.buildingId}"><i class="fa fa-plus"></i></span> `;
                    const buildingRow = `
                        <tr>
                            <td>
                                <div class="media align-items-center">
                                    <div class="avatar avatar-image rounded">
                                            <img src="/Images/Building/${building.image}" alt="">
                                    </div>
                                    <div class="m-l-10">
                                        <h5 class="m-b-0">${building.buildingName}</h5>
                                    </div>
                                </div>
                            </td>
                            <td>
                                    <span id="floorCount">${countText}</span>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="badge badge-${building.status === 'active' ? 'success' : 'danger'} badge-dot m-r-10"></div>
                                    <div>${building.status}</div>
                                </div>
                            </td>
                            <td>
                                <span>${building.facilityName}</span>
                            </td>
                            <td class="text-right">
                                    <div class="dropdown dropdown-animated scale-left">
                        <a class="text-gray font-size-18" href="javascript:void(0);" data-toggle="dropdown">
                            <i class="anticon anticon-ellipsis"></i>
                        </a>
                         <div class="dropdown-menu">
                <button class="dropdown-item btn btn-info btn-tone viewBuilding" type="button" data-id="${building.buildingId}">
                    <span class="m-l-10">View</span>
                </button>
                    <button class="dropdown-item btn btn-warning btn-tone editBuilding" type="button" data-id="${building.buildingId}">
                    <span class="m-l-10">Edit</span>
                </button>
                    <button class="dropdown-item btn btn-danger btn-tone deleteBuilding" type="button" data-id="${building.buildingId}">
                    <span class="m-l-10">Delete</span>
                </button>
            </div>
                    </div>
                            </td>
                        </tr>
                    `;

                    $('#building-list').append(buildingRow);
                } catch (error) {
                    console.error('Error loading building count from API: ' + error);
                }
            }
        };

        const createPagination = (totalPages, buildings) => {
            const pagination = $('#pagination');

            if (totalPages > 0) {
                pagination.empty();

                const prevLi = $('<li class="page-item"><a class="page-link" href="#">Prev</a></li>');
                if (currentPage === 1) {
                    prevLi.addClass('disabled');
                }
                pagination.append(prevLi);

                const startPage = Math.max(1, currentPage - 1);
                const endPage = Math.min(totalPages, currentPage + 1);

                for (let i = startPage; i <= endPage; i++) {
                    const pageLi = $(`<li class="page-item"><a class="page-link" href="#">${i}</a></li>`);
                    if (i === currentPage) {
                        pageLi.addClass('active');
                    }
                    pagination.append(pageLi);
                }

                const nextLi = $('<li class="page-item"><a class="page-link" href="#">Next</a></li>');
                if (currentPage === totalPages) {
                    nextLi.addClass('disabled');
                }
                pagination.append(nextLi);

                pagination.show();
            } else {
                pagination.hide();
            }

            pagination.off('click').on('click', 'a', function (event) {
                event.preventDefault();
                const page = $(this).parent().text();
                if (page === 'Prev' && currentPage > 1) {
                    currentPage--;
                } else if (page === 'Next' && currentPage < totalPages) {
                    currentPage++;
                } else {
                    currentPage = parseInt(page);
                }
                updatePagination(totalPages, buildings);
                updateBuildingList(buildings, currentPage, itemsPerPage);
            });
        };

        const updatePagination = (totalPages, buildings) => {
            const pagination = $('#pagination');
            pagination.find('li').removeClass('active disabled');

            const prevLi = pagination.find('li:first');
            if (currentPage === 1) {
                prevLi.addClass('disabled');
            }

            const startPage = Math.max(1, currentPage - 1);
            const endPage = Math.min(totalPages, currentPage + 1);

            pagination.find('li:not(:first):not(:last)').each(function (index) {
                const pageNumber = startPage + index;
                $(this).toggleClass('active', pageNumber === currentPage);
                $(this).find('a').text(pageNumber);
            });

            const nextLi = pagination.find('li:last');
            if (currentPage === totalPages) {
                nextLi.addClass('disabled');
            }
        };

        $.ajax({
            url: 'https://finnsapi.developvn.click/api/buildings',
            type: 'GET',
            dataType: 'json',
            success: async (buildings) => {
                const totalPages = Math.ceil(buildings.length / itemsPerPage);
                await updateBuildingList(buildings, currentPage, itemsPerPage);
                createPagination(totalPages, buildings);
            },
            error: (xhr, status, error) => {
                console.log('Error loading buildings from API: ' + error);
            }
        });

        $('#building-facility').on('change', async () => {
            const selectedFacilityId = $(this).val();

            let url = 'https://finnsapi.developvn.click/api/buildings';
            if (selectedFacilityId !== '0' && selectedFacilityId) {
                url += '?filter=facilityId eq ' + selectedFacilityId;
            }
            try {
                const response = await $.ajax({
                    url: url,
                    type: 'GET',
                    dataType: 'json'
                });
                const totalPages = Math.ceil(response.length / itemsPerPage);
                await updateBuildingList(response, 1, itemsPerPage, totalPages);
                createPagination(totalPages, response);
            } catch (error) {
                console.error('Error:', error);
            }
        });

        $.ajax({
            url: 'https://finnsapi.developvn.click/api/facilities',
            type: 'GET',
            success: (response) => {
                response.forEach((facility) => {
                    $('#new-building-facility').append(`<option value="${facility.facilityId}">${facility.facilityName}</option>`);
                    $('#edit-building-facility').append(`<option value="${facility.facilityId}">${facility.facilityName}</option>`);
                    $('#building-facility').append(`<option value="${facility.facilityId}">${facility.facilityName}</option>`);
                });
            },
            error: (xhr, status, error) => {
                console.error(error);
            }
        });

        $('#create-building-btn').click(() => {
            const buildingName = $('#new-building-name').val();
            const status = $('input[name="statusRadios"]:checked').val();
            const facilityId = $('#new-building-facility').val();
            const imageInput = $('#new-building-image');

            const formData = new FormData();
            formData.append('BuildingName', buildingName);
            formData.append('Status', status);
            formData.append('FacilityId', facilityId);
            if (imageInput[0].files.length > 0) {
                const imageFile = imageInput[0].files[0];
                formData.append('Image', imageFile);
            }

            $.ajax({
                url: 'https://finnsapi.developvn.click/api/buildings',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: (response) => {
                    console.log('Building added successfully:', response);
                    Swal.fire({
                        icon: 'success',
                        title: 'Building added successfully!',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        $('#form-add-building').submit();
                    });
                    $('#create-new-building').modal('hide');
                },
                error: (xhr, status, error) => {
                    console.error('Error adding building:', error);
                    console.log(imageInput[0].files);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to add building. Please try again later.',
                    });
                }
            });
        });

        $(document).on('click', '.deleteBuilding', function () {
            const buildingId = $(this).data('id');

            Swal.fire({
                title: 'Are you sure?',
                text: 'You will not be able to recover this building!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: 'https://finnsapi.developvn.click/api/buildings/' + buildingId,
                        type: 'DELETE',
                        success: (response) => {
                            console.log(response);
                            Swal.fire(
                                'Deleted!',
                                'Building has been deleted.',
                                'success'
                            ).then(() => {
                                location.reload();
                            });
                        },
                        error: (xhr, status, error) => {
                            console.error(xhr.responseText);
                            Swal.fire(
                                'Error!',
                                'Failed to delete building. Please try again later.',
                                'error'
                            );
                        }
                    });
                }
            });
        });

        $(document).on('click', '.editBuilding', function () {
            const buildingId = $(this).data('id');
            showEditModal(buildingId);
        });

        const showEditModal = (buildingId) => {
            $.ajax({
                url: 'https://finnsapi.developvn.click/api/buildings?filter=buildingId eq ' + buildingId,
                type: 'GET',
                success: (response) => {
                    $('#building-id').val(response[0].buildingId);
                    $('#edit-building-name').val(response[0].buildingName);
                    if (response[0].status === 'active') {
                        $('#edit-statusActive').prop('checked', true);
                    } else {
                        $('#edit-statusDeactive').prop('checked', true);
                    }
                    $('#edit-building').modal('show');
                    let facilityName = '';
                    $.ajax({
                        url: 'https://finnsapi.developvn.click/api/facilities?filter=facilityId eq' + response.facilityId,
                        type: 'GET',
                        async: false,
                        success: (facilityResponse) => {
                            facilityId = facilityResponse[0].facilityId;
                        },
                        error: (xhr, status, error) => {
                            console.error('Error fetching facility details:', error);
                        }
                    });
                    $('#edit-building-facility').val(facilityId);

                    $('#edit-building').modal('show');
                },
                error: (xhr, status, error) => {
                    console.error('Error fetching building details:', error);
                }
            });
        };

        $('#edit-building-btn').click(() => {
            const buildingId = $('#building-id').val();
            const buildingName = $('#edit-building-name').val();
            const status = $('input[name="edit-statusRadios"]:checked').val();
            const facilityId = $('#edit-building-facility').val();
            const imageInput = $('#edit-building-image');

            const formData = new FormData();
            formData.append('BuildingId', buildingId);
            formData.append('BuildingName', buildingName);
            formData.append('Status', status);
            formData.append('FacilityId', facilityId);
            if (imageInput[0].files.length > 0) {
                const imageFile = imageInput[0].files[0];
                formData.append('Image', imageFile);
            }

            $.ajax({
                url: 'https://finnsapi.developvn.click/api/buildings',
                type: 'PUT',
                data: formData,
                contentType: false,
                processData: false,
                success: (response) => {
                    Swal.fire({
                        icon: 'success',
                        title: 'Building Updated',
                        text: 'Building information has been updated successfully!',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        $('#form-edit-building').submit();
                    });
                    $('#edit-building').modal('hide');
                    console.log('Building updated successfully:', response);
                },
                error: (xhr, status, error) => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while updating building information.',
                    });
                    console.error('Error updating building:', error);
                }
            });
        });


    //get image when selected
        const displaySelectedImage = (input, containerId) => {
            const file = input.files[0];
            const reader = new FileReader();

            reader.onload = (e) => {
                const imgElement = document.createElement('img');
                imgElement.src = e.target.result;
                imgElement.className = "img-fluid rounded";

                const selectedImageContainer = document.getElementById(containerId);
                selectedImageContainer.innerHTML = '';
                selectedImageContainer.appendChild(imgElement);
            }

            reader.readAsDataURL(file);
        }


</script>






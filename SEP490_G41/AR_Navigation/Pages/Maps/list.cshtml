@page
@model AR_Navigation.Pages.Maps.listModel
@{
    Layout = "_AdminLayout";
}

<style>
    /* Đặt kích thước cho container chứa ảnh */
    .selected-image-container {
        width: 200px;
        height: 200px;
        border: 2px solid #ced4da;
        border-radius: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 10px;
    }

        .selected-image-container img {
            max-width: 100%;
            max-height: 100%;
            border-radius: 8px;
        }
</style>
<div class="page-header no-gutters">
    <h1>Map List</h1>
    <div class="row align-items-md-center">
        <div class="col-md-6">
            <div class="row">
                <div class="col-md-5">
                    <div class="input-affix m-v-10">
                        <select class="form-control" id="map-facility">
                            <option value="0" disabled selected>Select by facility</option>
                            <!-- Options for buildings will be created by JavaScript -->
                        </select>
                    </div>
                </div>
                <div class="col-md-5">
                    <div class="input-affix m-v-10">
                        <select class="form-control" id="map-building">
                            <option value="0" disabled selected>Select by building</option>
                            <!-- Options for buildings will be created by JavaScript -->
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="text-md-right m-v-10">
                <button class="btn btn-primary" data-toggle="modal" data-target="#create-new-map">
                    <i class="anticon anticon-plus"></i>
                    <span class="m-l-5">New Map</span>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="card" id="list-view">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Map Name</th>
                            <th>Building Name</th>
                            <th>Floor Name</th>
                            <th>Map Manager Name</th>
                            <th>Image</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="map-list">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="row justify-content-center">
    <nav>
        <ul id="pagination" class="pagination"></ul>
    </nav>
</div>

@* Modal Create Map *@
<div class="modal fade" id="create-new-map">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Map</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <i class="anticon anticon-close"></i>
                </button>
            </div>
            <div class="modal-body">
                <form asp-page="/Maps/List" asp-page-handler="CreateMap" id="form-add-map" method="post" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="new-map-name">Map Name</label>
                        <input type="text" class="form-control" id="new-map-name" placeholder="Please input map name" required>
                    </div>
                    <div class="form-group">
                        <label for="new-building-image">Image</label>
                        <div class="input-group">
                            <div class="custom-file">
                                <input type="file" name="ImageFile" class="custom-file-input" id="new-building-image" aria-describedby="inputGroupFileAddon" onchange="displaySelectedImage(this, 'add-selected-image-container')">
                                <label class="custom-file-label" for="new-building-image">Choose file</label>
                            </div>
                        </div>
                        <div id="add-selected-image-container" class="selected-image-container" style="margin-top: 10px;"></div>
                    </div>
                    <div class="form-group">
                        <label for="new-map-building">Facility</label>
                        <select class="form-control" id="new-map-facility">
                            <option value="0" disabled selected>Select by facility</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="new-map-building">Building</label>
                        <select class="form-control" id="new-map-building">
                            <option value="0" disabled selected>Select by building</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="new-map-floor">Floor</label>
                        <select class="form-control" id="new-map-floor">
                            <option value="0" disabled selected>Select by floor</option>
                        </select>
                    </div>
                    <button type="button" class="btn btn-primary" id="create-map-btn">Create Map</button>
                </form>
            </div>
        </div>
    </div>
</div>

@* Modal Edit Map *@
<div class="modal fade" id="edit-map">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Map</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <i class="anticon anticon-close"></i>
                </button>
            </div>
            <div class="modal-body">
                <form asp-page="/Maps/List" asp-page-handler="EditMap" id="form-edit-map" method="post" enctype="multipart/form-data">
                    <input type="hidden" name="MapId" id="map-id" value="">
                    <div class="form-group">
                        <label for="edit-map-name">Map Name</label>
                        <input type="text" class="form-control" id="edit-map-name" placeholder="Please input map name" required>
                    </div>
                    <div class="form-group">
                        <label for="new-building-image">Image</label>
                        <div class="input-group">
                            <div class="custom-file">
                                <input type="file" name="ImageFile" class="custom-file-input" id="edit-map-image" aria-describedby="inputGroupFileAddon" onchange="displaySelectedImage(this, 'edit-selected-image-container')">
                                <label class="custom-file-label" for="new-building-image">Choose file</label>
                            </div>
                        </div>
                        <div id="edit-selected-image-container" class="selected-image-container" style="margin-top: 10px;"></div>
                    </div>

                    <input type="hidden" id="edit-map-floor">

                    <button type="button" class="btn btn-primary" id="edit-map-btn">Save Changes</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(() => {
        const userJson = sessionStorage.getItem('user');
        if (!userJson) {
            window.location.href = '/Authen/Login';
        } else {
            const user = JSON.parse(userJson);
            if (user.status !== "active") {
                // Hiển thị thông báo SweetAlert
                Swal.fire({
                    icon: 'error',
                    title: 'Access Denied',
                    text: 'You do not have permission to access this page.',
                    showConfirmButton: false,
                    timer: 2000 // Đóng thông báo sau 2 giây
                }).then((result) => {
                    // Chuyển hướng đến trang đăng nhập sau khi thông báo đóng
                    window.location.href = '/HomePage/Home';
                });
            }
        }
        const itemsPerPage = 5;
        let currentPage = 1; // Khởi tạo trang hiện tại là 1

        // Cập nhật danh sách bản đồ từ API
        const updateMapList = (maps, currentPage, itemsPerPage) => {
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const mapsToShow = maps.slice(startIndex, endIndex);

            // Sắp xếp danh sách bản đồ theo tên (mapName)
            maps.sort((a, b) => a.mapName.localeCompare(b.mapName));

            $('#map-list').empty();

            for (const map of mapsToShow) {
                const mapRow = `
                                                                     <tr>
                                                                         <td>
                                                                             <div class="media align-items-center">
                                                                                 <div class="m-l-10">
                                                                                     <h5 class="m-b-0">${map.mapName}</h5>
                                                                                 </div>
                                                                             </div>
                                                                         </td>
                                                                         <td>
                                                                             <div class="media align-items-center">
                                                                                 <div class="avatar avatar-image rounded">
                                                                                     <img src="/Images/Building/${map.buildingImg}" alt="">
                                                                                 </div>
                                                                                 <div class="m-l-10">
                                                                                     <h5 class="m-b-0">${map.buildingName}</h5>
                                                                                 </div>
                                                                             </div>
                                                                         </td>
                                                                         <td>
                                                                             <span>${map.floorName}</span>
                                                                         </td>
                                                                         <td>
                                                                             <span>${map.managerFullName}</span>
                                                                         </td>
                                                                         <td>
                                                                             <div class="avatar avatar-image rounded">
                                                                                 <img src="/Images/Map/${map.mapImage2D}" alt="">
                                                                             </div>
                                                                         </td>
                                                                         <td class="text-right">
                                                                             <div class="dropdown dropdown-animated scale-left">
                                                                                 <a class="text-gray font-size-18" href="javascript:void(0);" data-toggle="dropdown">
                                                                                     <i class="anticon anticon-ellipsis"></i>
                                                                                 </a>
                                                                                 <div class="dropdown-menu">
                                                                                     <button class="dropdown-item btn btn-info btn-tone viewMap" type="button" data-id="${map.mapId}">
                                                                                         <span class="m-l-10">View</span>
                                                                                     </button>
                                                                                     <button class="dropdown-item btn btn-warning btn-tone editMap" type="button" data-id="${map.mapId}">
                                                                                         <span class="m-l-10">Edit</span>
                                                                                     </button>
                                                                                     <button class="dropdown-item btn btn-danger btn-tone deleteMap" type="button" data-id="${map.mapId}">
                                                                                         <span class="m-l-10">Delete</span>
                                                                                     </button>
                                                                                 </div>
                                                                             </div>
                                                                         </td>
                                                                     </tr>
                                                                 `;

                $('#map-list').append(mapRow);
            }
        };

        // Tạo phân trang
        const createPagination = (totalPages, maps) => {
            const pagination = $('#pagination');

            if (totalPages > 0) {
                pagination.empty();

                // Nút "Prev"
                const prevLi = $('<li class="page-item"><a class="page-link" href="#">Prev</a></li>');
                if (currentPage === 1) {
                    prevLi.addClass('disabled');
                }
                pagination.append(prevLi);

                // Hiển thị trang hiện tại và 2 trang xung quanh
                const startPage = Math.max(1, currentPage - 1);
                const endPage = Math.min(totalPages, currentPage + 1);

                for (let i = startPage; i <= endPage; i++) {
                    const pageLi = $(`<li class="page-item"><a class="page-link" href="#">${i}</a></li>`);
                    if (i === currentPage) {
                        pageLi.addClass('active');
                    }
                    pagination.append(pageLi);
                }

                // Nút "Next"
                const nextLi = $('<li class="page-item"><a class="page-link" href="#">Next</a></li>');
                if (currentPage === totalPages) {
                    nextLi.addClass('disabled');
                }
                pagination.append(nextLi);

                pagination.show();
            } else {
                pagination.hide();
            }

            pagination.off('click').on('click', 'a', (event) => {
                event.preventDefault();
                const page = $(event.target).parent().text();
                if (page === 'Prev' && currentPage > 1) {
                    currentPage--;
                } else if (page === 'Next' && currentPage < totalPages) {
                    currentPage++;
                } else {
                    currentPage = parseInt(page);
                }
                updatePagination(totalPages, maps);
                updateMapList(maps, currentPage, itemsPerPage);
            });
        };

        const updatePagination = (totalPages, maps) => {
            const pagination = $('#pagination');
            pagination.find('li').removeClass('active disabled');

            // Nút "Prev"
            const prevLi = pagination.find('li:first');
            if (currentPage === 1) {
                prevLi.addClass('disabled');
            }

            // Hiển thị trang hiện tại và 2 trang xung quanh
            const startPage = Math.max(1, currentPage - 1);
            const endPage = Math.min(totalPages, currentPage + 1);

            pagination.find('li:not(:first):not(:last)').each((index) => {
                const pageNumber = startPage + index;
                const listItem = $(this);
                listItem.toggleClass('active', pageNumber === currentPage);
                listItem.find('a').text(pageNumber);
            });

            // Nút "Next"
            const nextLi = pagination.find('li:last');
            if (currentPage === totalPages) {
                nextLi.addClass('disabled');
            }
        };

        // Lấy danh sách bản đồ từ API
        $.ajax({
            url: 'https://finnsapi.developvn.click/api/maps',
            type: 'GET',
            dataType: 'json',
            success: (maps) => {
                const totalPages = Math.ceil(maps.length / itemsPerPage);
                updateMapList(maps, currentPage, itemsPerPage);
                createPagination(totalPages, maps);
            },
            error: (xhr, status, error) => {
                console.log('Error loading maps from API: ' + error);
            }
        });

        // Lọc bản đồ theo tòa nhà
        $('#map-building').on('change', () => {
            const selectedBuildingId = $(this).val(); // Lấy buildingId đã chọn

            let url = 'https://finnsapi.developvn.click/api/maps';
            if (selectedBuildingId !== '0' && selectedBuildingId) {
                url += '?filter=buildingId eq ' + selectedBuildingId;
            }

            $.ajax({
                url: url,
                type: 'GET',
                dataType: 'json',
                success: (maps) => {
                    const totalPages = Math.ceil(maps.length / itemsPerPage);
                    updateMapList(maps, 1, itemsPerPage);
                    createPagination(totalPages, maps);
                },
                error: (xhr, status, error) => {
                    console.error('Error:', error);
                }
            });
        });

        $(document).ready(() => {
            // Load danh sách các cơ sở ban đầu
            $.ajax({
                url: 'https://finnsapi.developvn.click/api/facilities',
                type: 'GET',
                success: (response) => {
                    response.forEach((facility) => {
                        // Thêm tùy chọn cho mỗi cơ sở
                        $('#map-facility').append('<option value="' + facility.facilityId + '">' + facility.facilityName + '</option>');
                        $('#new-map-facility').append('<option value="' + facility.facilityId + '">' + facility.facilityName + '</option>');
                        $('#edit-map-facility').append('<option value="' + facility.facilityId + '">' + facility.facilityName + '</option>');
                    });
                },
                error: (xhr, status, error) => {
                    console.error(error);
                }
            });

            // Sự kiện change cho phần tử select của facility
            $('#map-facility').change(() => {
                const selectedFacilityId = $(this).val(); // Lấy giá trị của facility đã chọn
                $('#map-building').empty(); // Xóa tất cả các tùy chọn tòa nhà hiện có
                $('#map-building').append('<option value="0" disabled selected>Select by building</option>');

                // Tạo URL OData để lấy danh sách các tòa nhà từ facility đã chọn
                const url = 'https://finnsapi.developvn.click/api/buildings?$filter=facilityId eq ' + selectedFacilityId;

                // Gửi yêu cầu AJAX để lấy danh sách các tòa nhà từ facility đã chọn
                $.ajax({
                    url: url,
                    type: 'GET',
                    success: (response) => {
                        // Thêm tùy chọn cho mỗi tòa nhà từ response
                        response.forEach((building) => {
                            $('#map-building').append('<option value="' + building.buildingId + '">' + building.buildingName + '</option>');
                        });
                    },
                    error: (xhr, status, error) => {
                        console.error(error);
                    }
                });
            });
        });

        $('#new-map-facility').change(() => {
            const selectedFacilityId = $(this).val();
            $('#new-map-building').empty();
            $('#new-map-building').append('<option value="0" disabled selected>Select by building</option>');

            if (selectedFacilityId !== '0') {
                const url = 'https://finnsapi.developvn.click/api/buildings?$filter=facilityId eq ' + selectedFacilityId;
                $.ajax({
                    url: url,
                    type: 'GET',
                    success: (response) => {
                        response.forEach((building) => {
                            $('#new-map-building').append('<option value="' + building.buildingId + '">' + building.buildingName + '</option>');
                        });
                    },
                    error: (xhr, status, error) => {
                        console.error(error);
                    }
                });
            }
        });

        // Load building options based on selected facility for edit modal
        $('#edit-map-facility').change(() => {
            const selectedFacilityId = $(this).val();
            $('#edit-map-building').empty();
            $('#edit-map-building').append('<option value="0" disabled selected>Select by building</option>');

            if (selectedFacilityId !== '0') {
                const url = 'https://finnsapi.developvn.click/api/buildings?$filter=facilityId eq ' + selectedFacilityId;
                $.ajax({
                    url: url,
                    type: 'GET',
                    success: (response) => {
                        response.forEach((building) => {
                            $('#edit-map-building').append('<option value="' + building.buildingId + '">' + building.buildingName + '</option>');
                        });
                    },
                    error: (xhr, status, error) => {
                        console.error(error);
                    }
                });
            }
        });

        $('#new-map-building').change(() => {
            const buildingId = $(this).val();
            $.ajax({
                url: 'https://finnsapi.developvn.click/api/floors/building/' + buildingId,
                type: 'GET',
                success: (response) => {
                    $('#new-map-floor').empty(); // Xóa tất cả các tùy chọn hiện có
                    $('#new-map-floor').append('<option value="0" disabled selected>Select by floor</option>');
                    response.forEach((floor) => {
                        $('#new-map-floor').append('<option value="' + floor.floorId + '">' + floor.floorName + '</option>');
                    });
                },
                error: (xhr, status, error) => {
                    console.error(error);
                }
            });
        });

        $('#edit-map-building').change(() => {
            const buildingId = $(this).val();
            $.ajax({
                url: 'https://finnsapi.developvn.click/api/floors/building/' + buildingId,
                type: 'GET',
                success: (response) => {
                    $('#edit-map-floor').empty(); // Xóa tất cả các tùy chọn hiện có
                    response.forEach((floor) => {
                        $('#edit-map-floor').append('<option value="' + floor.floorId + '">' + floor.floorName + '</option>');
                    });
                },
                error: (xhr, status, error) => {
                    console.error(error);
                }
            });
        });

        $('#create-map-btn').click(() => {
            const mapName = $('#new-map-name').val();
            const floorId = $('#new-map-floor').val();
            const imageInput = $('#new-building-image');
            const userJson = sessionStorage.getItem('user');
            const user = JSON.parse(userJson); // Parse userJson thành đối tượng JavaScript

            const formData = new FormData();
            formData.append('MapName', mapName);
            formData.append('FloorId', floorId);
            if (imageInput[0].files.length > 0) {
                const imageFile = imageInput[0].files[0];
                formData.append('mapImage2D', imageFile);
            }

            // Gửi yêu cầu AJAX POST đến API
            $.ajax({
                url: 'https://finnsapi.developvn.click/api/maps?memberId=' + user.userid,
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: (response) => {
                    Swal.fire({
                        icon: 'success',
                        title: 'Map added successfully!',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        $('#form-add-map').submit();
                    });
                    $('#create-new-map').modal('hide');
                },
                error: (xhr, status, error) => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to add map. Please try again later.',
                    });
                }
            });

        });

        // Xóa Map API
        $(document).on('click', '.deleteMap', function () {
            const mapId = $(this).data('id');

            Swal.fire({
                title: 'Are you sure?',
                text: 'You will not be able to recover this map!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: 'https://finnsapi.developvn.click/api/maps/' + mapId,
                        type: 'DELETE',
                        success: (response) => {
                            Swal.fire(
                                'Deleted!',
                                'Map has been deleted.',
                                'success'
                            ).then(() => {
                                location.reload();
                            });
                        },
                        error: (xhr, status, error) => {
                            Swal.fire(
                                'Error!',
                                'Failed to delete map. Please try again later.',
                                'error'
                            );
                        }
                    });
                }
            });
        });

        // Hiển thị modal chỉnh sửa với dữ liệu theo mapId
        $(document).on('click', '.editMap', () => {
            const mapId = $(this).data('id');
            showEditModal(mapId);
        });

        const showEditModal = (mapId) => {
            $.ajax({
                url: 'https://finnsapi.developvn.click/api/maps/' + mapId,
                type: 'GET',
                success: (response) => {
                    $('#map-id').val(response.mapId);
                    $('#edit-map-name').val(response.mapName);
                    $('#edit-map-floor').val(response.floorId);
                    // Hiển thị modal chỉnh sửa
                    $('#edit-map').modal('show');
                },
                error: (xhr, status, error) => {
                    console.error('Error fetching map details:', error);
                }
            });
        };

        $('#edit-map-btn').click(() => {
            const mapId = $('#map-id').val();
            const mapName = $('#edit-map-name').val();
            const floorId = $('#edit-map-floor').val();
            const imageInput = $('#edit-map-image');

            const formData = new FormData();
            formData.append('MapId', mapId);
            formData.append('MapName', mapName);
            formData.append('FloorId', floorId);
            if (imageInput[0].files.length > 0) {
                const imageFile = imageInput[0].files[0];
                formData.append('MapImage2D', imageFile);
            }

            $.ajax({
                url: 'https://finnsapi.developvn.click/api/maps/',
                type: 'PUT',
                data: formData,
                contentType: false,
                processData: false,
                success: (response) => {
                    Swal.fire({
                        icon: 'success',
                        title: 'Map Updated',
                        text: 'Map information has been updated successfully!',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        $('#form-edit-map').submit();
                    });
                    $('#edit-map').modal('hide');
                    console.log('Map updated successfully:', response);
                },
                error: (xhr, status, error) => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while updating map information.',
                    });
                    console.error('Error updating map:', error);
                }
            });
        });

        // Chuyển hướng đến trang chi tiết bản đồ
        $(document).on('click', '.viewMap', () => {
            const mapId = $(this).data('id');
            window.location.href = `Detail/${mapId}`;
        });
    });


    const displaySelectedImage = (input, containerId) => {
        const file = input.files[0];
        const reader = new FileReader();

        reader.onload = (e) => {
            const imgElement = document.createElement('img');
            imgElement.src = e.target.result;
            imgElement.className = "img-fluid rounded";

            const selectedImageContainer = document.getElementById(containerId);
            selectedImageContainer.innerHTML = '';
            selectedImageContainer.appendChild(imgElement);
        };

        reader.readAsDataURL(file);
    };
</script>